- 모델의 선택 보다 전처리 단계가 성능에 가장 영향을 미친다는 점을 들어 스터디에서 다룬 내용 외의 전처리를 시도해았다.
- 가장 먼저, train 셋과 test 셋을 하나로 합친 combined 데이터를 작업하며 전처리를 통일되게 적용했다. 이는 train과 test의 불일치를 방지하기 위함이다.
- 새롭게 시도 해본 전처리 기법은 Name의 Title 추출이다. 
기존에 Name은 생존율과 관련이 적은 지표로 가정하고 제거하였지면, 상위 랭킹 제출자들의 분석을 참고하여 이름 속 Title(Mr, Ms, Dr등)의 정보를 추출하여 생존과의 관계를 분석해 보았다.
(이때, mlle, ms, mme등 mr/ms/mrs 와 유사한 호칭은 병합함)
- 기존에 결측치를 제거하거나 median 값으로 채우는 등의 접근을 하였지만, Age와 Fare는 생존율에 큰 영향을 주는 핵심 변수로 판단하고 이와 같은 지표의 결측치를 다룰 다른 방법을 고민해봄.
단순히 중앙값/삭제 보다는 RandomForestRegression을 사용하여 값을 예측하고 채워 넣는 형태를 채용해 보았다.
그러나 이와 같은 방법은 의외로 중앙값을 채워넣은 전처리 방식보다 정확도가 미세하게 낮게 나옴. 
이유는 두 가지 정도로 추측할 수 있는데, 우선 실제와 다른 값으로 인해 노이즈 데이터로 작용되어 모델 학습에 혼란을 주었을 가능성. 
둘째로는 오히려 과적합되어 일반화에 실패했을 가능성이다.

#Age, Fare 결측치를 Regression을 통해 보완해보려고 한 코드
age_features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Fare', 'Title', 'FamilySize', 'IsAlone']
age_df = combined[age_features + ['Age']]
known_age = age_df[age_df['Age'].notnull()]
unknown_age = age_df[age_df['Age'].isnull()]

X_age = known_age.drop('Age', axis=1)
y_age = known_age['Age']
rfr_age = RandomForestRegressor(n_estimators=100, random_state=0)
rfr_age.fit(X_age, y_age)

predicted_ages = rfr_age.predict(unknown_age.drop('Age', axis=1))
combined.loc[combined['Age'].isnull(), 'Age'] = predicted_ages

fare_features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Age', 'Title', 'FamilySize', 'IsAlone']
fare_df = combined[fare_features + ['Fare']]
known_fare = fare_df[fare_df['Fare'].notnull()]
unknown_fare = fare_df[fare_df['Fare'].isnull()]

X_fare = known_fare.drop('Fare', axis=1)
y_fare = known_fare['Fare']
rfr_fare = RandomForestRegressor(n_estimators=100, random_state=0)
rfr_fare.fit(X_fare, y_fare)

predicted_fares = rfr_fare.predict(unknown_fare.drop('Fare', axis=1))
combined.loc[combined['Fare'].isnull(), 'Fare'] = predicted_fares

결론:
- 최종 정확도는 0.8380
- 전처리가 정확도를 올리는데 많은 기여를 함. 그러나 모든 전처리 기법이 성능 향상으로 이어지진 않는다.
- 유의미하다고 생각한 Age, Fare를 예측값으로 채움으로써, 오히려 노이즈가 발생했다.
- 따라서 원본 데이터를 보존하고 사용하는 것이 중요할 수도 있음을 시사한다.
- 또한 복잡한 전처리를 사용하고 난 뒤에는 반드시 정확도 비교를 통해 실제로 효과가 있는지에 대한 검증의 필요성을 느꼈다.
